import unittest
from unittest.mock import patch
from io import StringIO
import os

from console import HBNBCommand


class TestConsoleCreateCommand(unittest.TestCase):

    def setUp(self):
        """Set up the test environment."""
        self.console = HBNBCommand()

    def tearDown(self):
        """Tear down the test environment."""
        del self.console

    @patch('sys.stdout', new_callable=StringIO)
    def test_create_instance_with_valid_params(self, mock_stdout):
        """Test create command with valid parameters."""
        class_name = "BaseModel"
        params = 'name="Example" number=42'

        # Mock user input
        with patch('builtins.input', side_effect=['create {} {}'.format(class_name, params), 'EOF']):
            self.console.cmdloop()

        # Check if the instance was created
        output = mock_stdout.getvalue().strip()
        self.assertTrue(output.startswith('* '))
        instance_id = output.split(' ')[1]

        # Check if the instance is stored in FileStorage
        storage_path = "file.json"  # Adjust this path based on your FileStorage setup
        self.assertTrue(os.path.exists(storage_path))

        # Clean up: delete the created instance from FileStorage
        with open(storage_path, 'r+') as f:
            data = f.read()
            self.assertIn(instance_id, data)

            # Remove the instance from FileStorage
            updated_data = data.replace(instance_id, '')
            f.seek(0)
            f.write(updated_data)
            f.truncate()

    @patch('sys.stdout', new_callable=StringIO)
    def test_create_instance_with_invalid_params(self, mock_stdout):
        """Test create command with invalid parameters."""
        class_name = "BaseModel"
        invalid_params = 'name=Example'  # Missing quotes around value

        # Mock user input
        with patch('builtins.input', side_effect=['create {} {}'.format(class_name, invalid_params), 'EOF']):
            self.console.cmdloop()

        # Check if an error message is printed
        output = mock_stdout.getvalue().strip()
        self.assertIn("**", output)  # Check for error message indicating invalid params

    # Add more test cases as needed for different scenarios


if __name__ == "__main__":
    unittest.main()
